import type { HsvaColor, RgbaColor } from "../../types/index.js";
declare const _default: __VLS_WithSlots<import("vue").DefineComponent<{
    [x: `data-${string}`]: any;
    color?: string | undefined;
    type?: "submit" | "reset" | "button" | undefined | undefined;
    name?: string | undefined | undefined;
    dir?: string | undefined;
    disabled?: (boolean | "true" | "false") | undefined;
    prefix?: string | undefined;
    value?: string | number | readonly string[] | undefined;
    form?: string | undefined | undefined;
    style?: import("vue").StyleValue | undefined;
    title?: string | undefined;
    onCopy?: ((payload: ClipboardEvent) => void) | undefined;
    onCut?: ((payload: ClipboardEvent) => void) | undefined;
    onPaste?: ((payload: ClipboardEvent) => void) | undefined;
    onCompositionend?: ((payload: CompositionEvent) => void) | undefined;
    onCompositionstart?: ((payload: CompositionEvent) => void) | undefined;
    onCompositionupdate?: ((payload: CompositionEvent) => void) | undefined;
    onDrag?: ((payload: DragEvent) => void) | undefined;
    onDragend?: ((payload: DragEvent) => void) | undefined;
    onDragenter?: ((payload: DragEvent) => void) | undefined;
    onDragexit?: ((payload: DragEvent) => void) | undefined;
    onDragleave?: ((payload: DragEvent) => void) | undefined;
    onDragover?: ((payload: DragEvent) => void) | undefined;
    onDragstart?: ((payload: DragEvent) => void) | undefined;
    onDrop?: ((payload: DragEvent) => void) | undefined;
    onFocus?: ((payload: FocusEvent) => void) | undefined;
    onFocusin?: ((payload: FocusEvent) => void) | undefined;
    onFocusout?: ((payload: FocusEvent) => void) | undefined;
    onBlur?: ((payload: FocusEvent) => void) | undefined;
    onChange?: ((payload: Event) => void) | undefined;
    onBeforeinput?: ((payload: InputEvent) => void) | undefined;
    onFormdata?: ((payload: FormDataEvent) => void) | undefined;
    onInput?: ((payload: InputEvent) => void) | undefined;
    onReset?: ((payload: Event) => void) | undefined;
    onSubmit?: ((payload: SubmitEvent) => void) | undefined;
    onInvalid?: ((payload: Event) => void) | undefined;
    onFullscreenchange?: ((payload: Event) => void) | undefined;
    onFullscreenerror?: ((payload: Event) => void) | undefined;
    onLoad?: ((payload: Event) => void) | undefined;
    onError?: ((payload: Event) => void) | undefined;
    onKeydown?: ((payload: KeyboardEvent) => void) | undefined;
    onKeypress?: ((payload: KeyboardEvent) => void) | undefined;
    onKeyup?: ((payload: KeyboardEvent) => void) | undefined;
    onDblclick?: ((payload: MouseEvent) => void) | undefined;
    onMousedown?: ((payload: MouseEvent) => void) | undefined;
    onMouseenter?: ((payload: MouseEvent) => void) | undefined;
    onMouseleave?: ((payload: MouseEvent) => void) | undefined;
    onMousemove?: ((payload: MouseEvent) => void) | undefined;
    onMouseout?: ((payload: MouseEvent) => void) | undefined;
    onMouseover?: ((payload: MouseEvent) => void) | undefined;
    onMouseup?: ((payload: MouseEvent) => void) | undefined;
    onAbort?: ((payload: UIEvent) => void) | undefined;
    onCanplay?: ((payload: Event) => void) | undefined;
    onCanplaythrough?: ((payload: Event) => void) | undefined;
    onDurationchange?: ((payload: Event) => void) | undefined;
    onEmptied?: ((payload: Event) => void) | undefined;
    onEncrypted?: ((payload: MediaEncryptedEvent) => void) | undefined;
    onEnded?: ((payload: Event) => void) | undefined;
    onLoadeddata?: ((payload: Event) => void) | undefined;
    onLoadedmetadata?: ((payload: Event) => void) | undefined;
    onLoadstart?: ((payload: Event) => void) | undefined;
    onPause?: ((payload: Event) => void) | undefined;
    onPlay?: ((payload: Event) => void) | undefined;
    onPlaying?: ((payload: Event) => void) | undefined;
    onProgress?: ((payload: ProgressEvent<EventTarget>) => void) | undefined;
    onRatechange?: ((payload: Event) => void) | undefined;
    onSeeked?: ((payload: Event) => void) | undefined;
    onSeeking?: ((payload: Event) => void) | undefined;
    onStalled?: ((payload: Event) => void) | undefined;
    onSuspend?: ((payload: Event) => void) | undefined;
    onTimeupdate?: ((payload: Event) => void) | undefined;
    onVolumechange?: ((payload: Event) => void) | undefined;
    onWaiting?: ((payload: Event) => void) | undefined;
    onSelect?: ((payload: Event) => void) | undefined;
    onScroll?: ((payload: Event) => void) | undefined;
    onScrollend?: ((payload: Event) => void) | undefined;
    onTouchcancel?: ((payload: TouchEvent) => void) | undefined;
    onTouchend?: ((payload: TouchEvent) => void) | undefined;
    onTouchmove?: ((payload: TouchEvent) => void) | undefined;
    onTouchstart?: ((payload: TouchEvent) => void) | undefined;
    onAuxclick?: ((payload: PointerEvent) => void) | undefined;
    onClick?: ((payload: PointerEvent) => void) | undefined;
    onContextmenu?: ((payload: PointerEvent) => void) | undefined;
    onGotpointercapture?: ((payload: PointerEvent) => void) | undefined;
    onLostpointercapture?: ((payload: PointerEvent) => void) | undefined;
    onPointerdown?: ((payload: PointerEvent) => void) | undefined;
    onPointermove?: ((payload: PointerEvent) => void) | undefined;
    onPointerup?: ((payload: PointerEvent) => void) | undefined;
    onPointercancel?: ((payload: PointerEvent) => void) | undefined;
    onPointerenter?: ((payload: PointerEvent) => void) | undefined;
    onPointerleave?: ((payload: PointerEvent) => void) | undefined;
    onPointerover?: ((payload: PointerEvent) => void) | undefined;
    onPointerout?: ((payload: PointerEvent) => void) | undefined;
    onBeforetoggle?: ((payload: ToggleEvent) => void) | undefined;
    onToggle?: ((payload: ToggleEvent) => void) | undefined;
    onWheel?: ((payload: WheelEvent) => void) | undefined;
    onAnimationcancel?: ((payload: AnimationEvent) => void) | undefined;
    onAnimationstart?: ((payload: AnimationEvent) => void) | undefined;
    onAnimationend?: ((payload: AnimationEvent) => void) | undefined;
    onAnimationiteration?: ((payload: AnimationEvent) => void) | undefined;
    onSecuritypolicyviolation?: ((payload: SecurityPolicyViolationEvent) => void) | undefined;
    onTransitioncancel?: ((payload: TransitionEvent) => void) | undefined;
    onTransitionend?: ((payload: TransitionEvent) => void) | undefined;
    onTransitionrun?: ((payload: TransitionEvent) => void) | undefined;
    onTransitionstart?: ((payload: TransitionEvent) => void) | undefined;
    tabindex?: (string | number) | undefined;
    innerHTML?: string | undefined;
    accesskey?: string | undefined;
    contenteditable?: (boolean | "true" | "false") | "inherit" | "plaintext-only" | undefined;
    contextmenu?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: (boolean | "true" | "false") | "" | "hidden" | "until-found" | undefined;
    id?: string | undefined;
    inert?: (boolean | "true" | "false") | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    spellcheck?: (boolean | "true" | "false") | undefined;
    translate?: "yes" | "no" | undefined;
    radiogroup?: string | undefined;
    role?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autocapitalize?: string | undefined;
    autocorrect?: string | undefined;
    autosave?: string | undefined;
    itemprop?: string | undefined;
    itemscope?: (boolean | "true" | "false") | undefined;
    itemtype?: string | undefined;
    itemid?: string | undefined;
    itemref?: string | undefined;
    results?: (string | number) | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputmode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "true" | "false") | undefined;
    'aria-autocomplete'?: "none" | "inline" | "list" | "both" | undefined;
    'aria-busy'?: (boolean | "true" | "false") | undefined;
    'aria-checked'?: (boolean | "true" | "false") | "mixed" | undefined;
    'aria-colcount'?: (string | number) | undefined;
    'aria-colindex'?: (string | number) | undefined;
    'aria-colspan'?: (string | number) | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: (boolean | "true" | "false") | "page" | "step" | "location" | "date" | "time" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-disabled'?: (boolean | "true" | "false") | undefined;
    'aria-dropeffect'?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: (boolean | "true" | "false") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "true" | "false") | undefined;
    'aria-haspopup'?: (boolean | "true" | "false") | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined;
    'aria-hidden'?: (boolean | "true" | "false") | undefined;
    'aria-invalid'?: (boolean | "true" | "false") | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    "aria-label"?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: (string | number) | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "true" | "false") | undefined;
    'aria-multiline'?: (boolean | "true" | "false") | undefined;
    'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: (string | number) | undefined;
    'aria-pressed'?: (boolean | "true" | "false") | "mixed" | undefined;
    'aria-readonly'?: (boolean | "true" | "false") | undefined;
    'aria-relevant'?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "true" | "false") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: (string | number) | undefined;
    'aria-rowindex'?: (string | number) | undefined;
    'aria-rowspan'?: (string | number) | undefined;
    'aria-selected'?: (boolean | "true" | "false") | undefined;
    'aria-setsize'?: (string | number) | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: (string | number) | undefined;
    'aria-valuemin'?: (string | number) | undefined;
    'aria-valuenow'?: (string | number) | undefined;
    'aria-valuetext'?: string | undefined;
    "aria-description"?: string;
    autofocus?: (boolean | "true" | "false") | undefined;
    formaction?: string | undefined | undefined;
    formenctype?: string | undefined | undefined;
    formmethod?: string | undefined | undefined;
    formnovalidate?: (boolean | "true" | "false") | undefined;
    formtarget?: string | undefined | undefined;
    class?: string | false;
    label?: string;
    allowAlpha?: boolean;
    border?: boolean;
    /** See ColorPicker.copyTransform */
    copyTransform?: (val: HsvaColor, stringVal: string) => any;
    /** See ColorPicker.allowAlpha */
    stringPrecision?: number;
    /** See ColorPicker.customRepresentation */
    customRepresentation?: {
        fromHsvaToString: (hsva: HsvaColor, includeAlpha: boolean) => string;
    };
    modelValue?: boolean | RgbaColor | undefined;
    tempValue?: RgbaColor | undefined;
    key?: PropertyKey | undefined;
    ref?: import("vue").VNodeRef | undefined;
    ref_for?: boolean | undefined;
    ref_key?: string | undefined;
    useDialogForBackdrop?: false;
    useBackdrop?: boolean;
    preferredHorizontal?: ("center" | "right" | "left" | "either" | "center-screen" | "right-most" | "left-most" | "center-most")[] | import("../../main.lib.js").PopupPositioner;
    preferredVertical?: ("top" | "bottom" | "center" | "either" | "center-screen" | "top-most" | "bottom-most" | "center-most")[] | import("../../main.lib.js").PopupPositioner;
    avoidRepositioning?: boolean;
    modifyPosition?: import("../../main.lib.js").PopupPositionModifier;
    canClose?: boolean;
}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: RgbaColor) => any;
    "update:tempValue": (value: RgbaColor | undefined) => any;
} & {
    save: () => any;
    cancel: () => any;
}, string, import("vue").PublicProps, Readonly<{
    [x: `data-${string}`]: any;
    color?: string | undefined;
    type?: "submit" | "reset" | "button" | undefined | undefined;
    name?: string | undefined | undefined;
    dir?: string | undefined;
    disabled?: (boolean | "true" | "false") | undefined;
    prefix?: string | undefined;
    value?: string | number | readonly string[] | undefined;
    form?: string | undefined | undefined;
    style?: import("vue").StyleValue | undefined;
    title?: string | undefined;
    onCopy?: ((payload: ClipboardEvent) => void) | undefined;
    onCut?: ((payload: ClipboardEvent) => void) | undefined;
    onPaste?: ((payload: ClipboardEvent) => void) | undefined;
    onCompositionend?: ((payload: CompositionEvent) => void) | undefined;
    onCompositionstart?: ((payload: CompositionEvent) => void) | undefined;
    onCompositionupdate?: ((payload: CompositionEvent) => void) | undefined;
    onDrag?: ((payload: DragEvent) => void) | undefined;
    onDragend?: ((payload: DragEvent) => void) | undefined;
    onDragenter?: ((payload: DragEvent) => void) | undefined;
    onDragexit?: ((payload: DragEvent) => void) | undefined;
    onDragleave?: ((payload: DragEvent) => void) | undefined;
    onDragover?: ((payload: DragEvent) => void) | undefined;
    onDragstart?: ((payload: DragEvent) => void) | undefined;
    onDrop?: ((payload: DragEvent) => void) | undefined;
    onFocus?: ((payload: FocusEvent) => void) | undefined;
    onFocusin?: ((payload: FocusEvent) => void) | undefined;
    onFocusout?: ((payload: FocusEvent) => void) | undefined;
    onBlur?: ((payload: FocusEvent) => void) | undefined;
    onChange?: ((payload: Event) => void) | undefined;
    onBeforeinput?: ((payload: InputEvent) => void) | undefined;
    onFormdata?: ((payload: FormDataEvent) => void) | undefined;
    onInput?: ((payload: InputEvent) => void) | undefined;
    onReset?: ((payload: Event) => void) | undefined;
    onSubmit?: ((payload: SubmitEvent) => void) | undefined;
    onInvalid?: ((payload: Event) => void) | undefined;
    onFullscreenchange?: ((payload: Event) => void) | undefined;
    onFullscreenerror?: ((payload: Event) => void) | undefined;
    onLoad?: ((payload: Event) => void) | undefined;
    onError?: ((payload: Event) => void) | undefined;
    onKeydown?: ((payload: KeyboardEvent) => void) | undefined;
    onKeypress?: ((payload: KeyboardEvent) => void) | undefined;
    onKeyup?: ((payload: KeyboardEvent) => void) | undefined;
    onDblclick?: ((payload: MouseEvent) => void) | undefined;
    onMousedown?: ((payload: MouseEvent) => void) | undefined;
    onMouseenter?: ((payload: MouseEvent) => void) | undefined;
    onMouseleave?: ((payload: MouseEvent) => void) | undefined;
    onMousemove?: ((payload: MouseEvent) => void) | undefined;
    onMouseout?: ((payload: MouseEvent) => void) | undefined;
    onMouseover?: ((payload: MouseEvent) => void) | undefined;
    onMouseup?: ((payload: MouseEvent) => void) | undefined;
    onAbort?: ((payload: UIEvent) => void) | undefined;
    onCanplay?: ((payload: Event) => void) | undefined;
    onCanplaythrough?: ((payload: Event) => void) | undefined;
    onDurationchange?: ((payload: Event) => void) | undefined;
    onEmptied?: ((payload: Event) => void) | undefined;
    onEncrypted?: ((payload: MediaEncryptedEvent) => void) | undefined;
    onEnded?: ((payload: Event) => void) | undefined;
    onLoadeddata?: ((payload: Event) => void) | undefined;
    onLoadedmetadata?: ((payload: Event) => void) | undefined;
    onLoadstart?: ((payload: Event) => void) | undefined;
    onPause?: ((payload: Event) => void) | undefined;
    onPlay?: ((payload: Event) => void) | undefined;
    onPlaying?: ((payload: Event) => void) | undefined;
    onProgress?: ((payload: ProgressEvent<EventTarget>) => void) | undefined;
    onRatechange?: ((payload: Event) => void) | undefined;
    onSeeked?: ((payload: Event) => void) | undefined;
    onSeeking?: ((payload: Event) => void) | undefined;
    onStalled?: ((payload: Event) => void) | undefined;
    onSuspend?: ((payload: Event) => void) | undefined;
    onTimeupdate?: ((payload: Event) => void) | undefined;
    onVolumechange?: ((payload: Event) => void) | undefined;
    onWaiting?: ((payload: Event) => void) | undefined;
    onSelect?: ((payload: Event) => void) | undefined;
    onScroll?: ((payload: Event) => void) | undefined;
    onScrollend?: ((payload: Event) => void) | undefined;
    onTouchcancel?: ((payload: TouchEvent) => void) | undefined;
    onTouchend?: ((payload: TouchEvent) => void) | undefined;
    onTouchmove?: ((payload: TouchEvent) => void) | undefined;
    onTouchstart?: ((payload: TouchEvent) => void) | undefined;
    onAuxclick?: ((payload: PointerEvent) => void) | undefined;
    onClick?: ((payload: PointerEvent) => void) | undefined;
    onContextmenu?: ((payload: PointerEvent) => void) | undefined;
    onGotpointercapture?: ((payload: PointerEvent) => void) | undefined;
    onLostpointercapture?: ((payload: PointerEvent) => void) | undefined;
    onPointerdown?: ((payload: PointerEvent) => void) | undefined;
    onPointermove?: ((payload: PointerEvent) => void) | undefined;
    onPointerup?: ((payload: PointerEvent) => void) | undefined;
    onPointercancel?: ((payload: PointerEvent) => void) | undefined;
    onPointerenter?: ((payload: PointerEvent) => void) | undefined;
    onPointerleave?: ((payload: PointerEvent) => void) | undefined;
    onPointerover?: ((payload: PointerEvent) => void) | undefined;
    onPointerout?: ((payload: PointerEvent) => void) | undefined;
    onBeforetoggle?: ((payload: ToggleEvent) => void) | undefined;
    onToggle?: ((payload: ToggleEvent) => void) | undefined;
    onWheel?: ((payload: WheelEvent) => void) | undefined;
    onAnimationcancel?: ((payload: AnimationEvent) => void) | undefined;
    onAnimationstart?: ((payload: AnimationEvent) => void) | undefined;
    onAnimationend?: ((payload: AnimationEvent) => void) | undefined;
    onAnimationiteration?: ((payload: AnimationEvent) => void) | undefined;
    onSecuritypolicyviolation?: ((payload: SecurityPolicyViolationEvent) => void) | undefined;
    onTransitioncancel?: ((payload: TransitionEvent) => void) | undefined;
    onTransitionend?: ((payload: TransitionEvent) => void) | undefined;
    onTransitionrun?: ((payload: TransitionEvent) => void) | undefined;
    onTransitionstart?: ((payload: TransitionEvent) => void) | undefined;
    tabindex?: (string | number) | undefined;
    innerHTML?: string | undefined;
    accesskey?: string | undefined;
    contenteditable?: (boolean | "true" | "false") | "inherit" | "plaintext-only" | undefined;
    contextmenu?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: (boolean | "true" | "false") | "" | "hidden" | "until-found" | undefined;
    id?: string | undefined;
    inert?: (boolean | "true" | "false") | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    spellcheck?: (boolean | "true" | "false") | undefined;
    translate?: "yes" | "no" | undefined;
    radiogroup?: string | undefined;
    role?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autocapitalize?: string | undefined;
    autocorrect?: string | undefined;
    autosave?: string | undefined;
    itemprop?: string | undefined;
    itemscope?: (boolean | "true" | "false") | undefined;
    itemtype?: string | undefined;
    itemid?: string | undefined;
    itemref?: string | undefined;
    results?: (string | number) | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputmode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "true" | "false") | undefined;
    'aria-autocomplete'?: "none" | "inline" | "list" | "both" | undefined;
    'aria-busy'?: (boolean | "true" | "false") | undefined;
    'aria-checked'?: (boolean | "true" | "false") | "mixed" | undefined;
    'aria-colcount'?: (string | number) | undefined;
    'aria-colindex'?: (string | number) | undefined;
    'aria-colspan'?: (string | number) | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: (boolean | "true" | "false") | "page" | "step" | "location" | "date" | "time" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-disabled'?: (boolean | "true" | "false") | undefined;
    'aria-dropeffect'?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: (boolean | "true" | "false") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "true" | "false") | undefined;
    'aria-haspopup'?: (boolean | "true" | "false") | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined;
    'aria-hidden'?: (boolean | "true" | "false") | undefined;
    'aria-invalid'?: (boolean | "true" | "false") | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    "aria-label"?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: (string | number) | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "true" | "false") | undefined;
    'aria-multiline'?: (boolean | "true" | "false") | undefined;
    'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: (string | number) | undefined;
    'aria-pressed'?: (boolean | "true" | "false") | "mixed" | undefined;
    'aria-readonly'?: (boolean | "true" | "false") | undefined;
    'aria-relevant'?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "true" | "false") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: (string | number) | undefined;
    'aria-rowindex'?: (string | number) | undefined;
    'aria-rowspan'?: (string | number) | undefined;
    'aria-selected'?: (boolean | "true" | "false") | undefined;
    'aria-setsize'?: (string | number) | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: (string | number) | undefined;
    'aria-valuemin'?: (string | number) | undefined;
    'aria-valuenow'?: (string | number) | undefined;
    'aria-valuetext'?: string | undefined;
    "aria-description"?: string;
    autofocus?: (boolean | "true" | "false") | undefined;
    formaction?: string | undefined | undefined;
    formenctype?: string | undefined | undefined;
    formmethod?: string | undefined | undefined;
    formnovalidate?: (boolean | "true" | "false") | undefined;
    formtarget?: string | undefined | undefined;
    class?: string | false;
    label?: string;
    allowAlpha?: boolean;
    border?: boolean;
    /** See ColorPicker.copyTransform */
    copyTransform?: (val: HsvaColor, stringVal: string) => any;
    /** See ColorPicker.allowAlpha */
    stringPrecision?: number;
    /** See ColorPicker.customRepresentation */
    customRepresentation?: {
        fromHsvaToString: (hsva: HsvaColor, includeAlpha: boolean) => string;
    };
    modelValue?: boolean | RgbaColor | undefined;
    tempValue?: RgbaColor | undefined;
    key?: PropertyKey | undefined;
    ref?: import("vue").VNodeRef | undefined;
    ref_for?: boolean | undefined;
    ref_key?: string | undefined;
    useDialogForBackdrop?: false;
    useBackdrop?: boolean;
    preferredHorizontal?: ("center" | "right" | "left" | "either" | "center-screen" | "right-most" | "left-most" | "center-most")[] | import("../../main.lib.js").PopupPositioner;
    preferredVertical?: ("top" | "bottom" | "center" | "either" | "center-screen" | "top-most" | "bottom-most" | "center-most")[] | import("../../main.lib.js").PopupPositioner;
    avoidRepositioning?: boolean;
    modifyPosition?: import("../../main.lib.js").PopupPositionModifier;
    canClose?: boolean;
}> & Readonly<{
    "onUpdate:modelValue"?: ((value: RgbaColor) => any) | undefined;
    onSave?: (() => any) | undefined;
    onCancel?: (() => any) | undefined;
    "onUpdate:tempValue"?: ((value: RgbaColor | undefined) => any) | undefined;
}>, {
    border: boolean;
    allowAlpha: boolean;
    stringPrecision: number;
    customRepresentation: {
        fromHsvaToString: (hsva: HsvaColor, includeAlpha: boolean) => string;
    };
    copyTransform: (val: HsvaColor, stringVal: string) => any;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>, {
    default?: (props: {
        stringColor: string;
        classes: "\n\tcolor-input--swatch\n\tafter:content-vertical-holder\n\tmin-w-4\n\tflex-1\n\trelative\n\tbefore:content-['']\n\tbefore:absolute\n\tbefore:inset-0\n\tbefore:bg-transparency-squares\n\tbefore:z-[-1]\n";
    }) => any;
} & {
    temp?: (props: {
        tempStringColor: string;
        classes: "\n\tcolor-input--swatch\n\tafter:content-vertical-holder\n\tmin-w-4\n\tflex-1\n\trelative\n\tbefore:content-['']\n\tbefore:absolute\n\tbefore:inset-0\n\tbefore:bg-transparency-squares\n\tbefore:z-[-1]\n";
    }) => any;
}>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=LibColorInput.vue.d.ts.map